
(* (** * Subtypes *) *)

(* Fixpoint toSubList (X: Type) (A: list X) (p: X -> Prop) (D:forall x, dec (p x))  : list (subtype p) := *)
(*   match A with *)
(*   | nil => nil *)
(*   | cons x A' => match Dec (p x) with *)
(*                 | left px => (exist  _ x (purify px)) :: toSubList A' D *)
(*                 | right _ => toSubList  A' _ end *)
(*   end. *)

(* Arguments toSubList {X} A p {D}. *)

(* Lemma toSubList_count (X: eqType) (p: X -> Prop) (A: list X) (_:forall x, dec (p x)) x: *)
(*   count (toSubList A p) x = count A (proj1_sig x). *)
(* Proof. *)
(*   induction A. *)
(*   - reflexivity. *)
(*   - cbn. decide (p a). *)
(*     + simpl. dec.  *)
(*       * congruence. *)
(*       * now rewrite <- subtype_extensionality in e. *)
(*       * change a with (proj1_sig (exist (pure p) a (purify p0)))  in e. now rewrite subtype_extensionality in e. *)
(*       * exact IHA.         *)
(*     + destruct x.  cbn. dec. *)
(*       * subst a. now impurify p0. *)
(*       * exact IHA. *)
(* Qed.  *)

(* Lemma subType_enum_ok (X:finType) (p: X -> Prop) (_: forall x, dec (p x)) x: *)
(*   count (toSubList (elem X) p) x = 1. *)
(* Proof. *)
(*   rewrite toSubList_count. apply enum_ok. *)
(* Qed. *)

(* Instance finTypeC_sub (X:finType) (p: X -> Prop) (_:forall x, dec (p x)): finTypeC (EqSubType p). *)
(* Proof. *)
(*   econstructor.  apply subType_enum_ok. *)
(* Defined. *)

(* Canonical Structure finType_sub (X: finType) (p: X -> Prop) (_: forall x, dec (p x))   := FinType (EqSubType p). *)
(* Arguments finType_sub {X} p {_}. *)

(* Lemma finType_sub_correct (X: finType) (p: X -> Prop) (_: forall x, dec (p x)) : subtype p = finType_sub p _. *)
(* Proof. *)
(* reflexivity.   *)
(* Qed. *)

(* Lemma finType_sub_enum (X: finType) (p: X -> Prop) (_: forall x, dec (p x)): *)
(*   toSubList (elem X) p= elem (finType_sub p _). *)
(* Proof. *)
(* reflexivity.   *)
(* Qed. *)
(* Set Printing Coercions. *)
(* Lemma tofinType_sub_correct (X: finType) (p: X -> Prop) (_: forall x, dec (p x)) : *)
(*   tofinType (subtype p) = finType_sub p _. *)
(* Proof. *)
(*   reflexivity. *)
(* Qed. *)
